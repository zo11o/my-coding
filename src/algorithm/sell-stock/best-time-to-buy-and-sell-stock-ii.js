/*
122. 买卖股票的最佳时机 II

给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。

设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。

注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。

 

示例 1:

输入: [7,1,5,3,6,4]
输出: 7
解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
     随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。
示例 2:

输入: [1,2,3,4,5]
输出: 4
解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。
     因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
示例 3:

输入: [7,6,4,3,1]
输出: 0
解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。
 

提示：

1 <= prices.length <= 3 * 10 ^ 4
0 <= prices[i] <= 10 ^ 4

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 */

/**
 * 贪心算法
 * 计算所有正反馈作用
 * @param {*} prices
 */
// var maxProfit = function (prices) {
//   var res = 0;
//   for (let i = 1; i < prices.length; i++) {
//       if (prices[i] > prices[i-1]) {
//           res = res + (prices[i] - prices[i - 1])
//       }
//   }
//   return res
// };


var maxProfit = function (prices) {
  var n = prices.length;
  var dp = new Array(n).fill(new Array(2).fill(new Array(3).fill(0)));
  // 动态规划：
  // 特征方程：dp[i][j][k]: i 表示第几天，j 表示当天结束是否持股，k 表示第几次交易；dp[i][j][k] 得记过表示到第i天为，状态为 j 得情况下，交易过 K 次获得得收益
  // 初始化情况:
  // 1. 第 i = 0 天时, 未持股(j=0)发生了k = 0 次交易：第一天休息
  dp[0][0][0] = 0
  // 2. 第 i = 0 天时, 未持股(j=0)发生了k = 1 次交易：不存在（不可能第一天存在卖出）
  dp[0][0][1] = -Infinity;
  // 3. 第 i = 0 天时, 未持股(j=0)发生了k = 2 次交易 不存在
  dp[0][0][2] = -Infinity;
  // 4. 第 i = 0 天时, 持股(j=1)发生了k = 0 次交易：即第一天买入
  dp[0][1][0] = -prices[0];
  // 5. 第 i = 0 天时, 持股(j=1)发生了k = 1 次交易
  dp[0][1][1] = -Infinity;
  // 6. 第 i = 0 天时, 持股(j=1)发生了k = 2 次交易
  dp[0][1][2] = -Infinity;

  for (var i = 1; i < n; i++) {
    console.log(dp)
    // 1. 从未操作过
    dp[i][0][0] = 0;
    // 5. 手上不持股，交易过一次：可能是昨天就没有，也可能是今天卖了
    dp[i][0][1] = Math.max((dp[i - 1][1][0] + prices[i]), dp[i - 1][0][1]);
    // 6. 手上不持股，交易过两次：可能是昨天就没有，也可能是今天卖了；
    dp[i][0][2] = Math.max((dp[i - 1][1][1] + prices[i]), dp[i - 1][0][2])
    // 2. 手上持股。可能是之前买得,也可能是今天买得
    dp[i][1][0] = Math.max((dp[i - 1][0][0] - prices[i]), dp[i - 1][1][0])
    // 3. 交易过一次，手上持股：可能是之前交易过一次并且昨天买了，或者之前就有了
    dp[i][1][1] = Math.max((dp[i - 1][0][1] - prices[i]), dp[i - 1][1][1]);
    // 4. 交易过2次，手上刺骨：不可能
    dp[i][1][2] = -Infinity;
  }
  return Math.max(dp[n - 1][0][2], dp[n - 1][0][1], 0)
};

console.log(maxProfit([3, 3, 5, 0, 0, 3, 1, 4]))
